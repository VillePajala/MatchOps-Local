name: Claude Custom Review

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
    inputs:
      review_type:
        description: 'Type of review to perform'
        required: true
        type: choice
        options:
          - security
          - performance
          - architecture
          - testing
          - test-suite-health
          - documentation
          - accessibility
          - custom
      custom_prompt:
        description: 'Custom review prompt (only used if review_type is "custom")'
        required: false
        type: string
      pr_number:
        description: 'PR number to review (leave empty for current PR)'
        required: false
        type: string

jobs:
  claude-custom-review:
    # Trigger on specific labels or manual dispatch
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.pull_request.labels.*.name, 'review:security') ||
      contains(github.event.pull_request.labels.*.name, 'review:performance') ||
      contains(github.event.pull_request.labels.*.name, 'review:architecture') ||
      contains(github.event.pull_request.labels.*.name, 'review:testing') ||
      contains(github.event.pull_request.labels.*.name, 'review:test-suite-health') ||
      contains(github.event.pull_request.labels.*.name, 'review:documentation') ||
      contains(github.event.pull_request.labels.*.name, 'review:accessibility')

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine review type from label
        id: determine-review
        run: |
          # Check which label triggered this workflow
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "review_type=${{ inputs.review_type }}" >> $GITHUB_OUTPUT
            echo "custom_prompt=${{ inputs.custom_prompt }}" >> $GITHUB_OUTPUT
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            # Determine from label
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:security') }}" == "true" ]]; then
              echo "review_type=security" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:performance') }}" == "true" ]]; then
              echo "review_type=performance" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:architecture') }}" == "true" ]]; then
              echo "review_type=architecture" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:testing') }}" == "true" ]]; then
              echo "review_type=testing" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:test-suite-health') }}" == "true" ]]; then
              echo "review_type=test-suite-health" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:documentation') }}" == "true" ]]; then
              echo "review_type=documentation" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:accessibility') }}" == "true" ]]; then
              echo "review_type=accessibility" >> $GITHUB_OUTPUT
            else
              echo "review_type=general" >> $GITHUB_OUTPUT
            fi
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Set review prompt
        id: set-prompt
        run: |
          REVIEW_TYPE="${{ steps.determine-review.outputs.review_type }}"

          case "$REVIEW_TYPE" in
            security)
              PROMPT=$(cat <<'EOF'
          Please perform a comprehensive security review of this pull request:

          **Security Focus Areas:**
          1. **Authentication & Authorization**
             - Check for proper access controls
             - Verify authentication mechanisms
             - Review permission checks

          2. **Data Protection**
             - Sensitive data handling (passwords, tokens, PII)
             - Encryption usage for sensitive data
             - Secure storage practices

          3. **Input Validation**
             - XSS vulnerabilities (especially in React components)
             - SQL/NoSQL injection risks
             - Command injection possibilities

          4. **Browser Security**
             - CSP (Content Security Policy) compliance
             - CORS configuration
             - Secure cookie settings
             - localStorage/IndexedDB security

          5. **Dependency Security**
             - Known vulnerabilities in dependencies
             - Outdated packages with security issues

          6. **Privacy & GDPR**
             - User data collection and storage
             - Data retention policies
             - Privacy-first architecture compliance

          **Output Format:**
          - List findings by severity (Critical, High, Medium, Low)
          - Provide specific code locations for each issue
          - Suggest fixes with code examples
          - Note any security best practices violations

          Reference the project's LOCAL_FIRST_PHILOSOPHY.md for privacy requirements.
          Use `gh pr comment` to post your findings.
          EOF
              )
              ;;

            performance)
              PROMPT=$(cat <<'EOF'
          Please perform a thorough performance review of this pull request:

          **Performance Focus Areas:**
          1. **React Performance**
             - Unnecessary re-renders
             - Missing React.memo() or useMemo()
             - Heavy computations in render
             - Large component trees

          2. **Bundle Size**
             - New dependencies impact
             - Code splitting opportunities
             - Tree-shaking effectiveness
             - Lazy loading usage

          3. **IndexedDB Optimization**
             - Transaction efficiency
             - Batch operations usage
             - Index utilization
             - Memory management

          4. **Algorithm Efficiency**
             - Time complexity issues
             - Space complexity concerns
             - Inefficient loops or iterations
             - Better data structure options

          5. **Asset Optimization**
             - Image sizes and formats
             - Font loading strategies
             - SVG optimization

          6. **Memory Leaks**
             - Event listener cleanup
             - Timer cleanup
             - Reference retention issues
             - React component cleanup

          **Output Format:**
          - List performance issues by impact (High, Medium, Low)
          - Provide specific code locations
          - Suggest optimizations with examples
          - Include performance metrics if measurable

          Use `gh pr comment` to post your analysis.
          EOF
              )
              ;;

            architecture)
              PROMPT=$(cat <<'EOF'
          Please review the architectural decisions in this pull request:

          **Architecture Focus Areas:**
          1. **Code Organization**
             - File and folder structure
             - Separation of concerns
             - Module boundaries
             - Component hierarchy

          2. **Design Patterns**
             - Appropriate pattern usage
             - Pattern anti-patterns
             - Consistency with existing patterns

          3. **Data Flow**
             - State management approach
             - Props drilling issues
             - Context usage
             - React Query patterns

          4. **Scalability**
             - Future growth considerations
             - Extensibility points
             - Technical debt introduced

          5. **Local-First Architecture**
             - Privacy-first compliance
             - Offline-first patterns
             - IndexedDB usage
             - No backend dependencies

          6. **Type Safety**
             - TypeScript usage
             - Type coverage
             - Any types usage
             - Interface design

          **Output Format:**
          - List architectural concerns
          - Suggest improvements aligned with project philosophy
          - Identify consistency issues with existing codebase
          - Recommend refactoring opportunities

          Reference CLAUDE.md and LOCAL_FIRST_PHILOSOPHY.md.
          Use `gh pr comment` to post your review.
          EOF
              )
              ;;

            testing)
              PROMPT=$(cat <<'EOF'
          Please review the testing strategy and coverage in this pull request:

          **Testing Focus Areas:**
          1. **Test Coverage**
             - Missing test cases
             - Edge cases not covered
             - Error scenarios untested
             - Integration test gaps

          2. **Test Quality**
             - Test readability and maintainability
             - Test isolation
             - Mock usage appropriateness
             - Test data quality

          3. **Test Performance**
             - Slow tests
             - Memory leaks in tests
             - Flaky tests potential
             - Test cleanup issues

          4. **Testing Best Practices**
             - Following CLAUDE.md testing guidelines
             - JSDoc documentation for critical tests
             - Proper async testing patterns
             - React Testing Library best practices

          5. **Mock Quality**
             - Mock module instance issues
             - Over-mocking concerns
             - Mock data realism

          **Output Format:**
          - List missing test coverage areas
          - Identify test quality issues
          - Suggest test improvements
          - Flag potential flaky tests

          Reference CLAUDE.md Testing Rules section.
          Use `gh pr comment` to post your findings.
          EOF
              )
              ;;

            test-suite-health)
              PROMPT=$(cat <<'EOF'
          Please perform a comprehensive health assessment of the entire test suite:

          **Test Suite Health Assessment:**

          1. **Overall Metrics & Statistics**
             - Total test count and distribution (unit/integration/e2e)
             - Pass rate and failure patterns
             - Test execution time (total and per-suite averages)
             - Slowest test suites (>5s)
             - Coverage metrics (if available)

          2. **Test Organization & Structure**
             - Test file organization and naming conventions
             - Test suite grouping and categorization
             - Consistency across test files
             - Adherence to CLAUDE.md testing standards
             - Proper use of describe/it blocks

          3. **Test Quality Indicators**
             - Tests with missing assertions
             - Tests that only check for "no errors"
             - Duplicate test cases
             - Overly complex tests (>50 lines)
             - Under-tested critical paths
             - Tests without JSDoc documentation

          4. **Flaky Test Detection**
             - Tests with timing dependencies
             - Tests using fixed timeouts instead of waitFor
             - Tests with race conditions
             - Tests missing proper async/await handling
             - Tests with unreliable mocks
             - Review test-results/flaky-tests-report.json if available

          5. **Test Isolation & Cleanup**
             - Proper beforeEach/afterEach usage
             - Memory leak risks (unclosed resources, event listeners)
             - Shared state between tests
             - Mock cleanup patterns
             - Global state pollution

          6. **Mock Quality & Patterns**
             - Mock module instance duplication issues
             - Over-mocking vs under-mocking
             - Mock data realism and maintenance
             - Mock implementation consistency
             - Proper mock reset/clear patterns

          7. **Test Performance Issues**
             - Tests creating large datasets unnecessarily
             - Inefficient test setup/teardown
             - Redundant test operations
             - Memory-intensive test patterns
             - Opportunities for parallel execution

          8. **Coverage Gaps**
             - Critical code paths without tests
             - Error handling not tested
             - Edge cases missing
             - Integration points untested
             - Browser API mocks needed

          9. **Test Maintenance Concerns**
             - Skipped/disabled tests (it.skip, xit)
             - TODO/FIXME comments in tests
             - Commented-out test code
             - Outdated test data or fixtures
             - Hard-coded test values needing constants

          10. **Best Practices Compliance**
              - CLAUDE.md testing guidelines adherence
              - Memory leak prevention (detectLeaks, detectOpenHandles)
              - Proper test categorization (@critical, @integration tags)
              - Test data management (centralized fixtures)
              - Error scenario coverage

          **Analysis Approach:**
          1. Run `npm test -- --listTests` to get all test files
          2. Examine test file structure and organization
          3. Look for anti-patterns in test code
          4. Check for flaky test indicators
          5. Analyze test performance data if available
          6. Review jest.config.js for test configuration
          7. Check setupTests files for global test setup issues

          **Output Format:**
          Provide a structured health report with:

          ### Executive Summary
          - Overall test suite grade (A-F)
          - Key strengths
          - Top 3-5 critical issues
          - Quick wins for improvement

          ### Detailed Findings
          For each category above:
          - Status: ✅ Good / ⚠️  Needs Attention / ❌ Critical
          - Specific issues found with file locations
          - Impact assessment (High/Medium/Low)

          ### Prioritized Recommendations
          1. **Critical** (fix immediately)
          2. **High Priority** (fix soon)
          3. **Medium Priority** (plan for next sprint)
          4. **Low Priority** (technical debt backlog)

          ### Metrics Dashboard
          - Total tests: X
          - Pass rate: X%
          - Average execution time: Xs
          - Slowest suite: X (Xs)
          - Coverage: X% (if available)
          - Flaky tests detected: X
          - Tests needing cleanup: X

          Reference CLAUDE.md Testing Rules and Professional Testing Standards.
          Use `gh pr comment` to post your comprehensive health report.
          EOF
              )
              ;;

            documentation)
              PROMPT=$(cat <<'EOF'
          Please review the documentation quality in this pull request:

          **Documentation Focus Areas:**
          1. **Code Documentation**
             - JSDoc completeness
             - Complex function explanations
             - Type documentation
             - Example usage

          2. **README Updates**
             - Installation instructions
             - Usage examples
             - Configuration options
             - Troubleshooting guide

          3. **API Documentation**
             - Function signatures
             - Parameter descriptions
             - Return value documentation
             - Error handling docs

          4. **Inline Comments**
             - Complex logic explanation
             - Why vs what comments
             - TODO/FIXME items
             - Magic number explanations

          5. **Architecture Docs**
             - Design decisions
             - Trade-off explanations
             - Migration guides
             - Breaking changes noted

          **Output Format:**
          - List documentation gaps
          - Suggest documentation improvements
          - Identify confusing code needing comments
          - Recommend README updates

          Use `gh pr comment` to post your review.
          EOF
              )
              ;;

            accessibility)
              PROMPT=$(cat <<'EOF'
          Please review accessibility (a11y) aspects of this pull request:

          **Accessibility Focus Areas:**
          1. **Semantic HTML**
             - Proper heading hierarchy
             - Landmark regions
             - Button vs div for clickable elements
             - Form labels and fieldsets

          2. **ARIA Attributes**
             - Appropriate ARIA usage
             - aria-label for icon buttons
             - aria-describedby for hints
             - Live regions for dynamic content

          3. **Keyboard Navigation**
             - Tab order
             - Focus management
             - Keyboard shortcuts
             - Focus visible indicators

          4. **Screen Reader Support**
             - Alt text for images
             - Descriptive link text
             - Form error announcements
             - Status messages

          5. **Color & Contrast**
             - WCAG AA compliance
             - Color-only information
             - Text readability
             - Focus indicators visibility

          6. **Mobile Accessibility**
             - Touch target sizes
             - Zoom support
             - Orientation support

          **Output Format:**
          - List a11y violations by WCAG level
          - Provide specific code fixes
          - Suggest testing procedures
          - Reference WCAG guidelines

          Use `gh pr comment` to post your findings.
          EOF
              )
              ;;

            custom)
              PROMPT="${{ steps.determine-review.outputs.custom_prompt }}"
              if [ -z "$PROMPT" ]; then
                PROMPT="Please review this pull request and provide general feedback."
              fi
              ;;

            *)
              PROMPT="Please review this pull request for code quality, potential bugs, and best practices."
              ;;
          esac

          # Output the prompt (using environment file for multiline)
          echo "REVIEW_PROMPT<<EOF" >> $GITHUB_ENV
          echo "$PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Claude Code Review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: ${{ env.REVIEW_PROMPT }}
          claude_args: '--allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*)"'
