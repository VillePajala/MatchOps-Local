name: Claude Custom Review

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
    inputs:
      review_type:
        description: 'Type of review to perform'
        required: true
        type: choice
        options:
          - security
          - performance
          - architecture
          - testing
          - documentation
          - accessibility
          - custom
      custom_prompt:
        description: 'Custom review prompt (only used if review_type is "custom")'
        required: false
        type: string
      pr_number:
        description: 'PR number to review (leave empty for current PR)'
        required: false
        type: string

jobs:
  claude-custom-review:
    # Trigger on specific labels or manual dispatch
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.pull_request.labels.*.name, 'review:security') ||
      contains(github.event.pull_request.labels.*.name, 'review:performance') ||
      contains(github.event.pull_request.labels.*.name, 'review:architecture') ||
      contains(github.event.pull_request.labels.*.name, 'review:testing') ||
      contains(github.event.pull_request.labels.*.name, 'review:documentation') ||
      contains(github.event.pull_request.labels.*.name, 'review:accessibility')

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine review type from label
        id: determine-review
        run: |
          # Check which label triggered this workflow
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "review_type=${{ inputs.review_type }}" >> $GITHUB_OUTPUT
            echo "custom_prompt=${{ inputs.custom_prompt }}" >> $GITHUB_OUTPUT
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            # Determine from label
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:security') }}" == "true" ]]; then
              echo "review_type=security" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:performance') }}" == "true" ]]; then
              echo "review_type=performance" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:architecture') }}" == "true" ]]; then
              echo "review_type=architecture" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:testing') }}" == "true" ]]; then
              echo "review_type=testing" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:documentation') }}" == "true" ]]; then
              echo "review_type=documentation" >> $GITHUB_OUTPUT
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'review:accessibility') }}" == "true" ]]; then
              echo "review_type=accessibility" >> $GITHUB_OUTPUT
            else
              echo "review_type=general" >> $GITHUB_OUTPUT
            fi
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Set review prompt
        id: set-prompt
        run: |
          REVIEW_TYPE="${{ steps.determine-review.outputs.review_type }}"

          case "$REVIEW_TYPE" in
            security)
              PROMPT=$(cat <<'EOF'
          Please perform a comprehensive security review of this pull request:

          **Security Focus Areas:**
          1. **Authentication & Authorization**
             - Check for proper access controls
             - Verify authentication mechanisms
             - Review permission checks

          2. **Data Protection**
             - Sensitive data handling (passwords, tokens, PII)
             - Encryption usage for sensitive data
             - Secure storage practices

          3. **Input Validation**
             - XSS vulnerabilities (especially in React components)
             - SQL/NoSQL injection risks
             - Command injection possibilities

          4. **Browser Security**
             - CSP (Content Security Policy) compliance
             - CORS configuration
             - Secure cookie settings
             - localStorage/IndexedDB security

          5. **Dependency Security**
             - Known vulnerabilities in dependencies
             - Outdated packages with security issues

          6. **Privacy & GDPR**
             - User data collection and storage
             - Data retention policies
             - Privacy-first architecture compliance

          **Output Format:**
          - List findings by severity (Critical, High, Medium, Low)
          - Provide specific code locations for each issue
          - Suggest fixes with code examples
          - Note any security best practices violations

          Reference the project's LOCAL_FIRST_PHILOSOPHY.md for privacy requirements.
          Use `gh pr comment` to post your findings.
          EOF
              )
              ;;

            performance)
              PROMPT=$(cat <<'EOF'
          Please perform a thorough performance review of this pull request:

          **Performance Focus Areas:**
          1. **React Performance**
             - Unnecessary re-renders
             - Missing React.memo() or useMemo()
             - Heavy computations in render
             - Large component trees

          2. **Bundle Size**
             - New dependencies impact
             - Code splitting opportunities
             - Tree-shaking effectiveness
             - Lazy loading usage

          3. **IndexedDB Optimization**
             - Transaction efficiency
             - Batch operations usage
             - Index utilization
             - Memory management

          4. **Algorithm Efficiency**
             - Time complexity issues
             - Space complexity concerns
             - Inefficient loops or iterations
             - Better data structure options

          5. **Asset Optimization**
             - Image sizes and formats
             - Font loading strategies
             - SVG optimization

          6. **Memory Leaks**
             - Event listener cleanup
             - Timer cleanup
             - Reference retention issues
             - React component cleanup

          **Output Format:**
          - List performance issues by impact (High, Medium, Low)
          - Provide specific code locations
          - Suggest optimizations with examples
          - Include performance metrics if measurable

          Use `gh pr comment` to post your analysis.
          EOF
              )
              ;;

            architecture)
              PROMPT=$(cat <<'EOF'
          Please review the architectural decisions in this pull request:

          **Architecture Focus Areas:**
          1. **Code Organization**
             - File and folder structure
             - Separation of concerns
             - Module boundaries
             - Component hierarchy

          2. **Design Patterns**
             - Appropriate pattern usage
             - Pattern anti-patterns
             - Consistency with existing patterns

          3. **Data Flow**
             - State management approach
             - Props drilling issues
             - Context usage
             - React Query patterns

          4. **Scalability**
             - Future growth considerations
             - Extensibility points
             - Technical debt introduced

          5. **Local-First Architecture**
             - Privacy-first compliance
             - Offline-first patterns
             - IndexedDB usage
             - No backend dependencies

          6. **Type Safety**
             - TypeScript usage
             - Type coverage
             - Any types usage
             - Interface design

          **Output Format:**
          - List architectural concerns
          - Suggest improvements aligned with project philosophy
          - Identify consistency issues with existing codebase
          - Recommend refactoring opportunities

          Reference CLAUDE.md and LOCAL_FIRST_PHILOSOPHY.md.
          Use `gh pr comment` to post your review.
          EOF
              )
              ;;

            testing)
              PROMPT=$(cat <<'EOF'
          Please review the testing strategy and coverage in this pull request:

          **Testing Focus Areas:**
          1. **Test Coverage**
             - Missing test cases
             - Edge cases not covered
             - Error scenarios untested
             - Integration test gaps

          2. **Test Quality**
             - Test readability and maintainability
             - Test isolation
             - Mock usage appropriateness
             - Test data quality

          3. **Test Performance**
             - Slow tests
             - Memory leaks in tests
             - Flaky tests potential
             - Test cleanup issues

          4. **Testing Best Practices**
             - Following CLAUDE.md testing guidelines
             - JSDoc documentation for critical tests
             - Proper async testing patterns
             - React Testing Library best practices

          5. **Mock Quality**
             - Mock module instance issues
             - Over-mocking concerns
             - Mock data realism

          **Output Format:**
          - List missing test coverage areas
          - Identify test quality issues
          - Suggest test improvements
          - Flag potential flaky tests

          Reference CLAUDE.md Testing Rules section.
          Use `gh pr comment` to post your findings.
          EOF
              )
              ;;

            documentation)
              PROMPT=$(cat <<'EOF'
          Please review the documentation quality in this pull request:

          **Documentation Focus Areas:**
          1. **Code Documentation**
             - JSDoc completeness
             - Complex function explanations
             - Type documentation
             - Example usage

          2. **README Updates**
             - Installation instructions
             - Usage examples
             - Configuration options
             - Troubleshooting guide

          3. **API Documentation**
             - Function signatures
             - Parameter descriptions
             - Return value documentation
             - Error handling docs

          4. **Inline Comments**
             - Complex logic explanation
             - Why vs what comments
             - TODO/FIXME items
             - Magic number explanations

          5. **Architecture Docs**
             - Design decisions
             - Trade-off explanations
             - Migration guides
             - Breaking changes noted

          **Output Format:**
          - List documentation gaps
          - Suggest documentation improvements
          - Identify confusing code needing comments
          - Recommend README updates

          Use `gh pr comment` to post your review.
          EOF
              )
              ;;

            accessibility)
              PROMPT=$(cat <<'EOF'
          Please review accessibility (a11y) aspects of this pull request:

          **Accessibility Focus Areas:**
          1. **Semantic HTML**
             - Proper heading hierarchy
             - Landmark regions
             - Button vs div for clickable elements
             - Form labels and fieldsets

          2. **ARIA Attributes**
             - Appropriate ARIA usage
             - aria-label for icon buttons
             - aria-describedby for hints
             - Live regions for dynamic content

          3. **Keyboard Navigation**
             - Tab order
             - Focus management
             - Keyboard shortcuts
             - Focus visible indicators

          4. **Screen Reader Support**
             - Alt text for images
             - Descriptive link text
             - Form error announcements
             - Status messages

          5. **Color & Contrast**
             - WCAG AA compliance
             - Color-only information
             - Text readability
             - Focus indicators visibility

          6. **Mobile Accessibility**
             - Touch target sizes
             - Zoom support
             - Orientation support

          **Output Format:**
          - List a11y violations by WCAG level
          - Provide specific code fixes
          - Suggest testing procedures
          - Reference WCAG guidelines

          Use `gh pr comment` to post your findings.
          EOF
              )
              ;;

            custom)
              PROMPT="${{ steps.determine-review.outputs.custom_prompt }}"
              if [ -z "$PROMPT" ]; then
                PROMPT="Please review this pull request and provide general feedback."
              fi
              ;;

            *)
              PROMPT="Please review this pull request for code quality, potential bugs, and best practices."
              ;;
          esac

          # Output the prompt (using environment file for multiline)
          echo "REVIEW_PROMPT<<EOF" >> $GITHUB_ENV
          echo "$PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Claude Code Review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: ${{ env.REVIEW_PROMPT }}
          claude_args: '--allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*)"'
